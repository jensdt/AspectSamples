package jlo.association;

import java.util.List;
import java.util.ArrayList;
import jlo.function.Function;

public class SingleBidiAssociationEnd<FROM,TO> extends AbstractAssociationEnd<FROM,TO> implements SingleAssociationEnd<TO> {

  public SingleBidiAssociationEnd(FROM object) {
    super(object);
  }

  public TO getOtherEnd() {
    if (getOtherAssociation() == null) {
        return null;
    }
    return getOtherAssociation().object();
  }

  public List<TO> getObjects() {
    ArrayList<TO> result = new ArrayList<TO>();
    if (getOtherAssociation() == null) {
        return result;
    }
    result.add(getOtherAssociation().object());
    return result;
  }
  
  public void connectTo(BidiAssociationEnd<? extends TO,? super FROM> other) {
  	checkLock();
  	checkLock(getOtherAssociation());
  	checkLock(other);
    if (other != _other) {
      register(other);
      if (other != null) {
          other.register(this);
      }
    }
  }

  public boolean registered(List<BidiAssociationEnd<? extends TO,? super FROM>> oldConnections, BidiAssociationEnd<? extends TO,? super FROM> registered) {
    return (oldConnections != null) &&
           (contains(registered)) &&
           (
             (
               (oldConnections.size() == 0)
             )
             ||
             (
               (oldConnections.size() == 1) &&
               (
                 (oldConnections.get(1) == registered)
                 ||
                 (
                   (! contains(oldConnections.get(1)))
                 )
               )
             )
           );
  }

  public boolean unregistered(List<BidiAssociationEnd<? extends TO,? super FROM>> oldConnections, BidiAssociationEnd<? extends TO,? super FROM> unregistered) {
    return (oldConnections != null) &&
           (getObjects().isEmpty()) &&
           (
             (
               (oldConnections.size() == 1) &&
               (oldConnections.get(1) == unregistered)
             )
             ||
             (oldConnections.size() == 0)
           );
  }

  public boolean isValidElement(BidiAssociationEnd<? extends TO,? super FROM> relation) {
    return true;
  }

  public void unregister(BidiAssociationEnd<? extends TO,? super FROM> other) {
  	if(_other != null) {
  		TO old = _other.object();
      _other = null;
      fireElementRemoved(old);
  	}
  }

  public void register(BidiAssociationEnd<? extends TO,? super FROM> other) {
    if(_other != null) {
  		TO old = _other.object();
      _other.unregister(this);
      _other = other;
      TO newObject = (_other != null ? _other.object() : null);
			fireElementReplaced(old, newObject);
    }
    // _other == null
    else if(other != null){
      _other = other;
      fireElementAdded(_other.object());
    }
  }

  public BidiAssociationEnd<? extends TO,? super FROM> getOtherAssociation() {
    return _other;
  }

  public List<BidiAssociationEnd<? extends TO,? super FROM>> getOtherAssociations() {
    ArrayList<BidiAssociationEnd<? extends TO,? super FROM>> result = new ArrayList<BidiAssociationEnd<? extends TO,? super FROM>>();
    if(_other != null) {
      result.add(_other);
    }
    return result;
  }

  private BidiAssociationEnd<? extends TO,? super FROM> _other;

	public void replace(BidiAssociationEnd<? extends TO, ? super FROM> element, BidiAssociationEnd<? extends TO, ? super FROM> newElement) {
		if(contains(element)) {
			connectTo(newElement);
		}
	}

  public void clear() {
	connectTo(null);
  }

}
